@startuml PlatformSharedPreferenceService-Sequence-Psuedo

!define POSITIVERESPONSE 90EE90

!define NEGATIVEERESPONSE EFBBBB

!define NUETRALRESPONSE F2DC79

skinparam sequence{
    ParticipantBackgroundColor #A7BEAE

    LifeLineBackgroundColor #E7E8D1

    LifeLineBorderColor #2C5F2D

    ActorBackgroundColor #FC766AFF

    ActorBorderColor #FC766AFF

    ArrowColor #B85042

    ArrowFontColor #234E70

}

title PlatformSharedPreferenceService - createNote(key: "1", value: List<NotesBO>)
autonumber 1
hide footbox
Caller -> PlatformSharedPreferenceService : Invoke **createNote(key: "1", value: List<NotesBO>)**
activate Caller
activate PlatformSharedPreferenceService
alt  (TRY)
    PlatformSharedPreferenceService -> PlatformSharedPreferenceService : Assign the values of **key** and **value** to a variable **userInfo** 
    PlatformSharedPreferenceService -> PlatformSharedPreferenceService : Serialize the **userInfo** and store the result in a **encodedData** variable
    PlatformSharedPreferenceService -> Storage: Set **encodedData** in sharedPreferences against the key using \nsetString() 
    activate Storage
    Storage--> PlatformSharedPreferenceService : Returns
    deactivate Storage
    PlatformSharedPreferenceService -> PlatformSharedPreferenceService : Store the response in the variable **result**
    alt #POSITIVERESPONSE (**result.content** == true)
        PlatformSharedPreferenceService --> Caller : Return the **ServiceResult** with status code as **OK**, message as **Success** and content as **result**
    else #NEGATIVEERESPONSE (else)
        PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code of **result**, message as **Failure**  and content as **result**
    end
else #NEGATIVEERESPONSE (on InternalServerError)
    PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code as **InternalServerError**, message as **Failure**  and content as **result**
else #NEGATIVEERESPONSE (on InsufficientStorage)
    PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code as **InsufficientStorage**, message as **Failure**  and content as **result**
else #NEGATIVEERESPONSE (CATCH)
    PlatformSharedPreferenceService -> PlatformSharedPreferenceService : Write log exceptions
    PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code as **SystemException**, message as **Failure**  and content as **result**
    deactivate PlatformSharedPreferenceService 
    deactivate Caller 
end

==PSEUDOCODE- createNote()==
    hnote across
        **TRY** 

            STORE the values of **key** and **value** as a pair to a variable **userInfo** 

            STORE the serialized result of the variable **userInfo** in a variable **encodedData**

            SET **encodedData** in sharedPreferences against the key using setString() and store the result in the variable **result**

                IF **result.content == true**

                    RETURN the **ServiceResult** with status code as **OK**, message as **Success** and content as **result**
            
                ELSE 

                    RETURN the **ServiceResult** with status code of **result**, message as **Failure** and content as **result**
        
        **ON InternalServerError**

            RETURN the **ServiceResult** with status code as **InternalServerError**, message as **Failure** and content as **result**

        **ON InsufficientStorage**

            RETURN the **ServiceResult** with status code as **InsufficientStorage**, message as **Failure** and content as **result**

        **CATCH** 
            INVOKE writeExceptionData() on the exception object **ex**

            RETURN the **ServiceResult<bool>** with status code as **SystemException**, message as **Failure** and content as **result**

    end hnote


newpage  PlatformSharedPreferenceService - retrieveNote()
autonumber 1 
hide footbox 
autonumber 1
hide footbox
Caller -> PlatformSharedPreferenceService : Invoke **retrieveNote(key: String)**
activate Caller
activate PlatformSharedPreferenceService
alt  (TRY)
    PlatformSharedPreferenceService -> Storage: Set **key** in sharedPreferences using getString() 
    activate Storage
    Storage--> PlatformSharedPreferenceService : Returns 
    deactivate Storage
    PlatformSharedPreferenceService -> PlatformSharedPreferenceService : Store the result in the variable **retrievedData**
    PlatformSharedPreferenceService -> PlatformSharedPreferenceService : Deserialize **retrievedData** and store it in the variable **decodedData**
    alt #POSITIVERESPONSE (**decodedData.content** != null)
        PlatformSharedPreferenceService --> Caller : Return the **ServiceResult** with status code as **OK**, message as **Success** and content as **decodedData**
    else #NEGATIVEERESPONSE (else)
        PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code of **result**, message as **Failure** and content as **null**
    end
else #NEGATIVEERESPONSE (on RequestEntityTooLarge)
    PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code as **RequestEntityTooLarge**, message as **Failure**  and content as **result**
else #NEGATIVEERESPONSE (on UnsupportedMediaType)
    PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code as **UnsupportedMediaType**, message as **Failure**  and content as **result**
else #NEGATIVEERESPONSE (CATCH)
    PlatformSharedPreferenceService -> PlatformSharedPreferenceService : Write log exceptions 
    PlatformSharedPreferenceService --> Caller :  Return the **ServiceResult** with status code as **SystemException**, message as **Failure** and content as **null**
    deactivate PlatformSharedPreferenceService 
    deactivate Caller 
end

==PSEUDOCODE- retrieveNote()==
    hnote across
        **TRY** 

            SET **key** in sharedPreferences using getString() and store the result in the variable **retrievedData**

            STORE the deserialized data of **retrievedData** in the variable **decodedData** 

                **IF decodedData.content != null**

                    RETURN the **ServiceResult** with status code as **OK**, message as **Success** and content as **decodedData**
            
                **ELSE**

                    RETURN the **ServiceResult<bool>** with status code of **result**, message as **Failure** and content as **null**
        
        **ON RequestEntityTooLarge**

            RETURN the **ServiceResult** with status code as **RequestEntityTooLarge**, message as **Failure** and content as **result**

        **ON UnsupportedMediaType**

            RETURN the **ServiceResult** with status code as **UnsupportedMediaType**, message as **Failure** and content as **result**

        **CATCH** 

            INVOKE writeExceptionData() on the exception object **ex**

            RETURN the **ServiceResult<bool>** with status code as **SystemException**, message as **Failure** and content as **null**

    end hnote